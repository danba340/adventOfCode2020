const homeworkInput = `(5 * 6 * 5 * 7) + (6 + (8 * 3 * 9 + 2 + 7) + 7 + (4 * 2 + 5)) + 8
(4 + 6 * 4) + 6 * ((2 + 5 * 3 + 3 + 7 + 3) * 3 * (7 * 8 * 7 + 2) + (3 + 5)) + 7 * 3 * 6
(7 + (3 + 6)) * 7 + 9 * 4 + 8
2 * 5 + (4 + 9 + (4 + 7 + 3 * 7 + 6) + 7 + 8) + 2 * 7 * 3
(5 * 2 + (6 * 7 * 2 * 7 * 9 + 2) * 4 + 7) * (6 + 7 * 6 * 3) + 7 + 6 * 6
5 + 9 * (2 * 3) * (3 + 5 + 4 + 8 + 3) + ((2 * 8) * (5 * 8 + 8 + 3 + 5 * 9) + 6 * 5 + 2)
4 * 5 + ((7 + 9 + 2 * 5 + 8) * 3 * 9 * 7 + 4) + (7 * (9 + 7 * 3 * 7) + 6)
4 * (6 * (7 + 9 * 4 * 2 * 5) + 4 * (4 + 2 + 9) * 7 * 2) + 5 * (4 * (2 + 6 + 3 * 3 + 5) * 5 * 9)
7 * (2 + (3 * 6) * 8 + 3 * 3 * 4) * (8 + 8 + 2 * 5 + 4 * 8) * ((2 * 5) + 9 * 6 + 5 * 8)
6 + (9 + 4 + (9 * 5 + 3 * 3) * (9 + 9 * 5 + 6) * 5 * 8) * 7 * 5 + ((7 * 6) + 4) * 2
(5 * 6 * 3) * (6 * 3 + 8) * 6 * 4 * 5
3 * 2 * 2 * 7 * (9 + (9 * 6 * 7 * 6 * 9 + 6) + (6 + 9 * 5 + 9) + 6) * 4
9 + 3 + (3 * 7 * 7 * (4 + 2 * 6 + 9 + 6 * 9) + 4)
4 * 4 + 3 + 6 * 4
(7 * 2 * (5 * 2) * 6 * (7 + 9 * 6 * 9 * 9 * 2) + (3 + 5)) * (4 + (8 * 5 * 6 * 7) * 5 + 3 + 3 + 2) * 4
2 * 9 + (7 * 9 + 3 * 3) * 4 + 6 + 8
((5 + 5) * (3 * 9 * 5 * 4)) * 3
9 * 5 * 9 * (7 + 9 * 5 * 8 * 4) * (3 * 6 + 8 * 4 + 5 * (9 * 5 + 5))
(7 * (5 * 8 * 8 + 3) + 7 + 8) * 9 + ((6 + 7 * 8 + 7) + 5 + 6 * 3 + 8)
9 * 7 + 8 * 5 + (8 * (3 * 6 + 9 + 3) * 8 * 5)
(3 * 4 + 6 + 5 * 2) + 9 + 3 * (9 + (3 + 2 + 4)) * (6 * 8 + 6 * 6 * 2 * (7 + 9))
3 + 7 + 2 + 9 + ((4 + 8 + 7) * 5 + (3 + 6) + 3 * 9 + 8) * ((9 * 2) + 3 + 6 + (5 + 6 * 9 * 6 + 8 + 5))
2 + (5 * 3 + 7 * (5 + 8 + 6 + 8 * 6) + 2 * (2 * 7 * 4 * 7 + 8)) + 8 * (2 * 3 * 7 * 5) * (7 + 3 + (8 + 2 * 3 * 9 + 9 * 2) * 2 + 8) + (2 + (5 * 4 + 2 * 9 + 2 * 3) * 3 + 5 + (4 * 9 * 2) + 2)
2 + ((9 * 5) + 4 * 5) + 7 * 4 + 7
(6 + 2 + 7) + 7 * 3
(7 * 7 + (5 + 7 + 2 * 4) * 5 + 2) * (3 + (4 * 3 + 7 + 4) + 8)
9 * ((7 * 2 + 3 * 7 * 3 * 8) + 4 + 2 * 2 + 6 * 9) * 4 + 4 + 7
3 * 2 * 6 * 8 + 2 * (8 + 5 * (9 * 5) + (7 * 3 * 5 + 3 * 2))
5 + 9 + 3 + 8 + (4 + 4)
9 * 2 * 3 * (8 + 5 * 9 + 9 + 9) + (2 * (6 + 6 + 8 + 6 + 2 * 5) * 5)
(3 + 8 * 5) + 8 * 9 + (2 + 3 * (4 * 2 * 8 + 2 * 8) * 3 + 9 * 5) * 7 * 5
(8 * 9 * (4 * 2 * 5) + 5 + 5) * 5 * 9 + 3
8 * (6 * 4 * (5 * 7 + 8 + 4 + 9) + 6) * (4 * 4 * 4 * 2 * (8 * 3 * 7 * 7 + 4)) + 2
((7 * 8) * 9 * 5) * 9 * 7 * ((4 + 6) + 3 + 2 + 3) * 5
5 * 6 * 2 * ((8 * 9 + 3 * 7) * 3 + (7 + 4))
4 + ((9 * 2 + 2 + 5 + 6 * 5) * 3) * (6 * 6)
(5 * 8 + 2) * (3 + (7 + 5 + 5 + 8) * 5 * (4 + 5 + 9)) + 2 + 3 * 8
((6 * 4 + 4 + 9 * 5 + 4) + 6 * 4 + 2) * 9 * 7 * 4 * 6
(2 + 6 * 3 + 4 * 7 + 3) * 9 + 9 + 5
9 + 2 + 9 + 5 * 4
8 * 6 * 6 * 6 + 5
2 + (5 * 5 + 7 + 8) + 6 * 4 * 2 + 6
(5 * 7 * 6 * 8 * 5) * 2
2 * 5 + (6 * (6 + 5 * 3) * 3) * (8 + 3 * 9 * 4 * 9 + (6 + 7 + 4 + 5 + 6 + 6))
2 + (8 * (5 + 6 + 9 + 6 * 8 * 6) * 7 * 5 * 2 + 3) + 7 * 5
8 + 4 + (9 * 6 + 6 * 6 * (9 + 3 * 7 + 8 * 2) * 3) + ((8 * 2 + 7 + 8) * 3 + 7 + 2) * 8
4 + 4 + (2 * 3 + 6 + (7 * 4 + 7 * 9 * 5 * 6)) + 4 * 6
(7 + 8 * 7 * 4 * 7) * 8 * (4 * 6 * 4 * 9 + 6) + 4 + 2
2 + 5 * ((8 + 5 * 9 * 2 + 3 * 5) + 2 * 9 * 2) + 5 * 7
(8 + 3 + 4 + 9 + 6 * 9) * 2 * 5 * 8 * 5 + 6
(3 * (5 + 9) * 5) * (7 + (9 * 5 * 3 * 4 * 3) * (2 * 7 + 2 * 3 + 2 + 7) * 3) + 3 * 2 * 9 + 5
(4 + 4 * 5) + 8 * 7 * 9 + 5 * (5 + 3 + (2 + 5 * 2))
(8 * 3 + 8 * 8) + 5 * (3 * 8 + 8 + (5 * 3 + 9 + 6 + 6) * 3 * 9) + (4 * 6 + 4 * 6 * (6 + 8)) + 7
3 + 4 * 2 + 8 * ((5 + 9 + 9) * 6 * 5)
2 + ((7 + 4 * 8) + 8 * (2 * 4) + 8 * 3)
(9 + 4 + (2 + 4 + 9 * 7 + 4)) * 9
8 + 8 + 6 * (3 + 7 + (4 + 6 + 8 * 7 + 7) + 9 * (9 * 3 * 9)) + 5 + 8
6 * 6 + (7 + 5 + 2 + (5 + 6 * 9 + 5 + 6)) * (2 * 7 + 6 * 9) + 6 + 3
3 * 9 + 2 * ((3 + 2 * 7) + 2 + 7) + 2 + 4
7 * (2 + 6 + 8 + 9 + 5 + 9) * 7 * 5
((7 + 3 + 8 * 5 + 3) * 3 + 3) + 3 + (5 + 9) + 2 * 6 + 6
(2 * 7 * 6) + 8 + (2 * 6 * 6 + 5 * 4 + 3) + (9 * (6 * 8 * 2 + 9 * 2) * 6 * 6)
2 + (7 * (8 + 6 + 4 * 3 * 9) + 2 + (6 + 6 + 6) + 2 + 4) + 6
2 + 5 * 5 + (4 + 6 * 5 * (4 * 2 + 4 + 6))
8 + 9 + ((6 + 4 * 4 * 2 * 4) + (3 * 2 + 6 + 6 * 8) + 5 + (6 * 6) + (3 + 7 * 9 * 4 * 4 * 8) * 2) + 3
9 * (8 * 2 + 4) * 5 * 6 * (3 + 6)
((7 * 5) + 4 + (2 * 6 * 5 * 5 * 5) + 9 * 9 * (9 * 7 + 8 + 8 + 8 * 7)) + (6 + 9 + 4 * 8 * 3 + 8) + 8 * 6 + 4 * 9
3 * 6 + (6 * 3 * 5 * 9 * 8 * 6)
2 + 7 * (6 + 2 + 9) + 7
((9 + 8 * 8 * 3 * 3) + (8 * 6 + 3) * 3) * 2
2 * 7 + 7
3 + 9 * 8 + 6 * 3 + (2 + (2 * 6) + 3)
((2 * 4 * 8 * 7) + 7 + 7 * 7) + 4 + 4 + 3 + (2 + 6 + (5 * 3 * 8 * 5) * 9)
(2 * 6 * (3 + 7) * 5) * 9 * 4 * (3 + (7 + 5) + 5 * (2 * 6 + 4 * 3 + 3)) * 9 + 5
7 + 8 + 5 + ((9 + 3 * 6 + 8 * 8 * 5) * 9 + (7 * 6 * 7 + 2) + 6) * 6
9 * (9 + 7 + 8 * 4 + 2 + 4)
8 * (2 + 9 * 9) + 9 * (9 * 2 * 8 * 7 + 2 * 2)
(9 + (5 + 3 * 6 * 8) + 6 + 2 + (8 * 6 * 2 * 5 + 3 + 3) * (7 * 9 + 3)) * 7 + 3 * (2 * 4) + 8 * 7
2 * 3 + 2 * 6 * 2 + (7 + 3 + 4 + 3 + 3 + 5)
8 + (9 + 2 + 6 * 4) + 5 * 7
7 * 9 + 4 * 7 + 9 + 8
9 + 4 * 7 * 8 + (6 + 8 + 9 * (8 * 4 * 2) + 4)
3 + (9 + 9 * 3 * 2) * 7
(7 * (3 + 3) + 9 * 3) + (3 * 7 * 9) * 3 + 2 + (3 * 9 + (2 + 3) * 3 + 7 * 5)
(5 + 2) + 5 * 9 + 3 * 9 + 9
9 * 6 * (5 + 7 * 4 * 3 + 2 * 3) * 2 * 5 + (5 * 9)
(2 + 3) * 2 + 4 * 3 + 9 + (9 * 3)
8 + 3 + (6 * 6 + (4 * 7 + 8 * 8 + 6) + 9 + 2 + 7)
(6 + 4 + 9) + 6 + (3 * 5 * (3 + 5 * 7 + 3 * 8 + 7) + 3 * 2 * 8) * 9
((6 + 7 * 5 + 2 + 6) + 5 + 9 * 6 * 8 * 5) * (5 + 3 + 7 + 4 * (4 * 6)) * (7 * 7 + 8) * ((7 * 4 + 3 * 7 + 8 + 7) * (2 * 3 + 9) + (7 + 4 * 2)) + 2
6 * (2 + (9 * 2 + 2 + 9 + 2) + (9 * 5 + 4) * 3 * 5) + (8 + 6) + ((7 * 6 + 7 * 2 + 9) * 9)
6 * 7 + (2 * (4 + 5 * 4 * 7) * (7 * 3) + 2 * 5) + (5 + 9 * (3 + 9) * 5 + 6 * (3 * 6 * 7))
2 + (2 + 7 * (9 + 3) + 3 + 9 + 9) + 8 + ((4 * 3 * 4 + 6 + 6 + 9) * 3 * 6 + 8) * 7
6 * 9 * ((5 * 9 * 4) * 8 + 6 * 6 * (7 + 2 * 5 * 7) * 9) + (5 * 3 + (4 * 5 + 3 * 3 + 4 + 5) + 3) * (6 + 8) * 5
9 * (2 * (5 * 6) + 3) * 8 * 4 * 4
4 + 3 * 9 + 2 * (9 * 6 * 5 * 6 + 9) * 5
((7 * 7 + 3 * 2 * 4 * 5) + 6 * (6 + 4 + 9 * 2 * 9) * 7) + 8 + 2 * 8 * 7
(5 * 3 + 6 * 5 + 4) + (4 + (9 * 7 * 2 * 3 + 9) + 5 * 4 * 5 + 9) + 3 * 4 * 8
(7 * 6 + 6 * 5) + (4 * 6 + 6)
(7 * 8 * 3 + 5 * 6) + 9 * 9 * 3 + 5
(4 * 6) * 5
4 + 5 + 7 * 3 * (6 * (5 + 5 * 5) * 8 + 2 + 2 + 8) * 4
8 + (8 * 5 * (3 + 8)) + 3 * (8 * (2 * 4 * 4 + 4 + 3 * 9))
6 + 5 + 2 + 2 + 3 * (8 + 4 * 7)
3 + 2 + (7 + 8 + 7) + 4 + 9
(7 + (7 + 9 + 4 + 2 + 7 * 7)) + (6 + 9) + 3 * 9
5 * (4 + 6) + 4 * (4 + 3)
(4 + 9) * (6 * 6 * 3 + 5 + 8) + 3 * 7 * 3
9 + 7 * (3 + 6 * 3) * 5 * (4 * 6 * 4 * 4) + 4
6 * 8 + 8 * (9 * (2 * 5) * (9 + 2 + 4) + (7 * 7 + 4) + 8 * 5) + 8 + (7 + 4 * (3 * 5 + 8 + 5 * 2))
8 + 4 * 3 * ((4 * 6) * 8 * (6 * 2 * 4 + 5) * (6 + 9))
4 * 4 * ((5 * 2 * 5 + 9) + 3 * (7 * 6 * 7) + 7 * 2 + 6) + 7 + 5
2 * 9 * 5 + 3 * (5 * 6 * 8 * 4 + (8 + 3 * 6 * 5)) * 6
(3 * 6 + 2) + 2 * 5 * (8 * (7 * 8) + 5 + 3)
((6 + 8 * 9 + 2) * 4 + 7 + (8 * 5 * 2 * 2) * 3 + 4) + (7 + 7 * (2 * 4 * 4 * 8 + 7 + 2) * (3 * 7 + 5 + 9) + 5 * 3) * ((3 + 3 * 9 + 9) + 9 + 8) * (4 + (8 + 7 * 3)) + 3
(6 * 2 * (7 + 3 + 2 * 2 * 5) + 8 * 9) * 5 * 2 * 7 * 9 + 6
((2 + 3 * 2 + 5 * 8 + 3) + 5 * (7 + 8 * 5 * 2 * 4 * 8) + 6 + 9) * 9 + (5 * 2 + 4) + 2 + 3
(4 + 7 * 7 + 6 * 9 + 9) + 3
2 + (5 + (7 + 5 * 6 + 4 + 9 + 2) + 2)
4 * 9 + (8 + 2 + 5 * 8)
2 + 3 * 5 * 6 + 6 * (6 * 7 * 6 + 4 * 2 * (5 + 3 + 4 + 8 + 4))
6 + 2 * (4 * 2 + 5 * (4 + 5) * 2) * 9
(5 * 8 * 5 + 5) + ((3 + 4) * 7 + 5 + (3 * 6 * 2) * 9 + 6) + 7
7 * 2 * (7 + 2 + 4 + 4 + (5 * 6 * 9 + 4 * 8))
5 * ((6 + 8 * 2 + 7 + 4) * 2) * 7 * 5 + 7 * 9
(6 + (6 + 2 * 8) * 4) * ((5 * 3 * 9 + 8) + 6 + 7) * (3 * 8 + (6 + 3) + 3 * 3 + (9 + 4 * 5)) + 3
6 + (9 * 2 * 2 + 3) + (5 * 3)
(4 + 7 * 8 * (2 + 3 + 6 * 8) * 3) + ((3 + 9) + (2 + 3 + 3) + 8 * 9 + (6 + 7 * 5 * 5) * 2) + 5 + 8 + 3 * (7 + 6 + 3 * 3 + 5 * 5)
2 * (9 + 5 * 9 * 2 + 8 + 8) * 7
9 + (4 * 4 + (9 * 4 * 8 * 8 * 6)) + 3 * 5
6 + 4 * ((5 + 6) * (3 + 6 * 3 + 2) * (2 * 5) + 3 + 2) * 6 + 4 + 6
2 + (7 * 8 * (6 * 7 * 9 + 8)) * 8 * 3 * 7 * 7
9 + 9 + 2
(8 * 6 + 8 + 2) + ((9 * 4 + 9) * 9) + 5 * 2 * 3
(2 * (2 * 6 * 6 * 3 * 5) * 6 * (4 * 9 * 9 + 4 * 5)) * (4 + (2 + 8 * 9 + 7) * 3 * 6) + 7
(7 * 6 * 4 * (9 * 7 + 4 + 7) + 7) * 6 * (2 + 4 + 8) * (5 * 4 * (7 * 9) + 4)
9 * 4 + (2 * (5 + 9 + 7 * 4) + 6 + (7 * 3) * 6 + (6 * 9 + 4 * 6 + 8 + 7)) * 3
4 + 8 * 7 + 6 * (3 * 8 * 8) + 3
7 * (7 + 4 + 8 + 3 * 7 + 7) * (9 * (3 + 3) + 5 * (8 * 2)) * 5 * (2 + (4 * 6 + 4 * 7 + 6 * 9) + 2 * (9 + 7) * 4 * 5)
3 + 9 + (6 + 8) + 4 * 7
3 * (5 * 8 + (7 + 8)) + 6 * 6 + 4 * 8
7 * (5 * (3 * 6 * 2 * 9 + 4 + 2)) + 9 * 6 * (4 * 7 * 2 * 8) * 3
(5 + 3) + 9 * (3 + 8) + 8 + (5 * 9)
4 * 5 + 2 * (6 * (9 * 2 + 4))
(9 * 9 * (5 + 5 + 5 * 7 + 6 * 8) * 4) * (9 * 5) + 5 + 7 + 7 * 8
5 + ((9 + 3 + 8 + 8 + 8) + 6 + 6) * 2 * 6
6 + (7 * 9) + (6 + 6 * 9 * 3) * 3
8 + 4 + 5 + ((7 + 5) + 7 * 7 * 2 + 2)
(3 + 4 + (6 + 5 + 5 + 6 + 9) * 4) + 8 * 8 * 7 + 6 + 7
5 + ((8 * 9 + 6) * (4 + 8 + 5 + 5 + 6 + 8)) * 4 * 4
9 + 8 * (2 * (6 + 7 * 6 + 4 * 2)) * 2 + (4 * 2 + 3 + 8)
4 * (2 + (3 * 8) * 4) + 8 * 8
9 + (3 * 9 * 6 + 5 + 5 * 2) + 3 * (3 + (8 + 6) * 3 + 6) + 4 * 3
6 + (6 * 3 * 9 * (5 * 7 + 8 * 9) + 3 + 8)
4 + (2 + 2) + (5 + 4 + 3 * 2 * 5 + 5) + (2 + 9) * 2
4 + 3
4 * ((3 + 8 + 4 + 6) + 6 + 7 + 8 + 9 * 9)
(7 * 9 + 5 + (4 + 5 + 7 + 9 * 4 * 2) * 2) * 5
2 + 8 * 2 + 5 * 2
4 + ((7 * 8 + 4) + 5 * 8 * (5 + 2) + 9) + 2 + 8 + 6
7 + 7 * ((7 * 6 * 6 + 3 + 8 * 5) + 7 * 8 * (6 + 2)) + 6 * 5 * 8
8 * 4 * 7 + 4
2 * 2 * 7 + 4
9 + (6 + 7 + (4 * 2 + 4)) + 9 + 5
6 + (7 * 6 * 8 + 9 + 6 * 7) + (6 * 7 * (3 + 4 * 6 + 9) * 8 * 6 * (5 + 6 + 7 * 6 * 3)) + 4
7 * (8 * (8 + 6) * 8 * 2 + (9 + 8 * 6 + 3) * (6 * 4 + 7 + 7)) + 9
5 * 9 + (7 * 5 + (4 + 2 * 5 * 6 + 9 + 9) * 8 * 6)
4 + (8 + 8 * 2 * (3 * 7 * 4 * 5) * 8 + 4) + 9 * 9 * 3
7 * (3 + 9 * 2)
9 * ((8 + 8) + 5 + (4 * 3 * 9) * (5 * 3 * 2) + 2 + 8) * 2 + 5 * ((5 * 7) * (5 + 7 + 7 * 6 + 5) + 5 * 4 + 6 + 5)
9 + 6 + ((5 + 9 + 9) * 8) * 2 * 8
7 + (2 * (7 * 3 + 8) * 8 * 3 + 2 * 5) + 4 + 9 + ((3 + 6 * 9 * 3 + 6) * 8 * 9)
7 + 7 + 2 * 3 + 5 * (3 * 5)
5 + 6 * 6 * 8 + (3 * 9 * 7 + (4 * 4 + 3 + 4 + 7 + 6) * (7 + 6) + 2)
(9 * (3 * 3 * 8 * 7 * 3 * 8)) + (2 + 3 * 8 * 6) + 6
(6 * 6 + (6 * 7 + 3) * 5 * (4 + 9) + 7) * 3 * 6
2 + 9 * 2 + 5 * (3 * 4 + (4 + 6 + 5 * 8 * 2) * 9 * 3) + (8 + 7 * 9 + 6 + 3 + 3)
(3 + (2 * 7 * 9 * 8 * 4)) * (6 * (6 * 5 * 2) * 9 * 7 * 9 + 3) + 6 + 4 * (6 + 9 + 4 + 2) * 3
2 * 7 * ((4 * 8 * 4 * 9) + (8 + 2 + 2 + 7 * 7 + 6) * 9)
2 * 3 + 4 + 9
(5 + (8 + 8 * 7 + 7 * 3 * 2) + 4 + (3 + 9 * 6) * 4) + ((3 + 2 + 6 * 4) + 6 * 7) + 2 * (5 + 8 + (3 * 7 * 7 * 9) + (2 * 7) * 7 + 5) + 6
8 + (9 * 5 + (6 * 4 * 6 + 5 + 2 + 7) * (7 + 8) + 7 + 5) + ((7 * 3 * 7 + 8 * 4 * 6) + 9 * 7 + 6 + 3 + (4 * 7 + 2)) * 9 * 3
(3 + 9 + 5 + 5 * 8) * (7 * 6)
(2 + 4) * (5 * 9 * 8 + 7 * 5 + 5) * 9 + (7 * 3 + 9 + 3)
6 * 5 * 2 * 6 + 6 + 8
7 * (5 * 8 + (3 + 6) + 6 + 7 * 2) * 9 + 3
2 * 7 * 9 * (7 * (9 + 9) + (9 + 2 * 5)) + 5 * 5
6 + 9
8 + 9 + 8 + 8 + 9 + 9
2 + (9 * (2 * 3 * 9) + 7) + 5
(7 * 4) + (9 * 5 * 2)
(4 + 2 + 6 + 8 * 4 * 8) * 7 * 8 + 7 + 2
(6 + 9 * 9 + 7 * (5 * 7 * 6 + 9 * 5 + 2) + 3) * (2 + 4 * (8 * 3 + 2 * 4 * 2 * 8) + 9) * (6 + 6 * 2 * 6) + 5
2 * 2
6 * ((5 + 9 + 3 + 3 * 7 * 4) * (7 * 7 * 9 * 3) * 2 * 9 + 5) + 5 + 3
(9 + 8) + (5 * 6 + 7) + 2 * (8 + 8 * 4 + (3 + 9) + (5 + 4 * 8 + 6 + 2)) * 5
9 * 5 * 2 + ((9 * 5) + 2) + (8 + 5 * 5 + (9 + 6) * 7)
3 + 5 + ((5 * 9) * (3 * 9 * 7 + 7)) * 4
(7 * 4 * 9 * 5 + 9) + 5 + 4
2 * (6 * 4 * 6) * (4 + (6 * 6 * 7) * 4 * 4 * (6 + 8 * 2 + 5 + 7 + 9) + 2) * 3 * 5 * (8 * 9 * 4)
(7 + (8 * 2 + 2 + 5 + 7 + 2) + 7) + 2
(4 * (4 * 6 * 9) * 6 * (5 * 3 * 9) + 5 + 7) * 7 * (2 + 6 + 4 * 3 + 9 * 5) + 2
7 * 5 + 9 + (7 + 8 + 4 + 6) + (4 + 9 + 3 * (3 * 6))
(8 + 5 + 9 + 8 * 4) + (2 * 7 + 4)
(5 + 9 * (9 * 9 + 2) * 5 + 4 + 4) + 6 + (7 * 4 + 8 + 5 * 4) * 4 * 8
4 * (8 * (4 * 3 * 7 * 8 * 2)) + 4 + 3 * 2
8 * 8 + (5 + (5 + 5 + 9 + 3 + 6 * 2) * 7 + 5) + 6 + 8
(7 * (2 + 5 + 7) * 9 + 5 * 4) + 8 * 4
(2 * 6 + 3 * 8) * (6 + 5) * 9
7 + ((2 * 5) + (3 + 9 * 4 * 2 + 9 + 9) * 7 + 5 + (5 + 7 * 9 * 3 * 7) + 4) + 4 + 8 * 2
(4 + 4 * 9 * 4) + 4
4 + (4 + 5 * 4 + 9 * (3 * 3)) * 7 * 9 + (7 + (8 + 9 + 5)) + 4
8 * 8 * 6 * 2
((8 + 6 + 8 * 8 + 9) + 8 * 8 * 7 + 7 + 2) * 8 + 5 + 4 * 5 * 9
3 + 3 * 6 * 5 * 5 + (3 + 7 * (5 + 2 + 5) + (2 * 2 + 6 * 2 * 4 + 3) * 9 + 4)
(7 * 5 * 8 + (8 + 4 + 8)) * 8 + (2 + 5 + 9 * 2) + 9
(7 + 3 + 8 * 6 + 8) * 5 * 6 * 2 + 2 + (6 * 7)
((9 + 6 * 7 * 3 + 2) + 6 * 4) * 6
5 * 7 * ((9 * 7 + 3 + 2) * (5 + 6 + 8)) + (4 + 8 + 6 * 6)
3 + 2 + (3 + 7) * 7 * ((6 * 8 * 4 * 2 * 9) + 9)
6 + 5 * 9 * 8
2 * (8 + 9 + 5 * (4 * 5) + 7 + (8 * 6 * 4 + 9 * 3)) * 7 * 8
7 * 3 + 7 + 3 + 5
(4 * 6 * 6 * (3 * 2 * 2 * 6 * 2 * 5) * 3) * 3 + 6
(5 * 7 + 9 * 5 * (2 + 5 * 4 * 4 + 3) + 6) + 9 + 6 + 5 * 3 + 7
8 + (7 * 5 + 7 + 9 * 8) + 8 + 7
((9 * 8 * 7 + 2 * 6) + 3 + 9) + 5 + 3
(9 + (5 * 9 * 3 + 7) + 6 * 9 * 8) + (4 + 6 + (7 * 8 + 7 * 2 * 6 * 4))
5 * (5 + (2 + 2 + 7) + 7 + 4)
8 + (2 + 8 + (7 + 4))
6 * 7 + 2 + (3 * 3 * 9) * (5 + 4 * 9)
7 + (2 * 3 * 3 * 6 + (6 + 2 * 7 + 4 * 2 * 5)) + 2 + 5 * 3
((4 * 9 * 4) + 3 * 6 * 5) * ((4 * 8 + 2) + (7 + 5 * 5) + 4) * 4 * 2 + 2 + 3
3 * (8 * 6 * 4 + 4) + 3 + ((7 * 8 * 9 * 5 * 2 + 7) * 6 + (5 * 5 * 3 + 5 + 7 * 9)) * 5 * 7
3 * 6 + (9 * 4 * 9)
6 * (3 + 5 * 8 * 7 + 2)
4 * 7 * 6 + 3 + 2 * 4
(9 + 9 * 7) + 2 * 6 * ((5 * 9 * 4 * 3 + 8 * 2) * 5 + (6 + 2 * 2) * 2)
4 * (6 * 5 * 4 * (8 + 9 + 2)) * (7 + 7 + 6 + (8 * 6 + 5) * 6) * 5
9 * (6 + 8 * 7 + 5) + 8 + (8 * 4 * 4 * 9) * 2 * 9
(6 * 2 * 3 + (9 + 2 + 8)) + 9 * 9 + 8 * 4 + 7
(2 + 5 + 6 + 7 + 3) * 8 + 9 * 3
5 + (3 + 5)
9 * 4 + 4 * 8 + 7 * ((7 * 6 * 2 + 4 * 3) + 6 * 9 + 6)
7 + (8 + 3 + 2 * 8 * (7 * 9 + 4 + 3 + 2)) * (4 + 9 * 7 * 2 + 5 * 2)
7 * 6 * ((2 * 7 + 4) + 8 * 6 + 4 + 3) + 2 * 2 * ((8 * 9 + 8 * 3 * 6) * (2 * 2 * 9 + 7 + 7) + 3)
7 + (7 + (8 + 7 + 2 * 7) * 3 * (7 + 3) + 3 + 4) + 4 * 9 + 7
7 + 6 + (9 * (5 + 6) * (7 * 3 * 9 * 8) * 7 * 6 * 7) + (9 * (9 * 9 + 7 * 8 + 9) + 6 * 5)
(9 * 8 * 9) * 9 + 8 + 8 + 9 + 6
2 * 2 * 5 + (8 * 9 * 7 + 8 * 6 + 5)
3 * 7 * 4 + 5 + (4 * 4 + 5 + 8)
(4 + (7 + 8) * (2 * 6 + 6 + 5)) + 2
(7 + 9 * 2) + 7 * 9 + 6 + (4 + 9 + (4 * 4 + 5 + 4))
2 + (2 + 3 * 7) * 3
8 * (9 + (5 + 9 + 3) + 8) * 8 + 9
8 * (7 * 8) + 7 + 9 + ((9 + 4 + 7 * 3 + 8 * 6) + 3 + 3 + (4 * 6 + 7 + 8) + 6) + 4
4 * 7 * 8
((4 * 6 * 3 * 6 + 6) * 3) * 4
4 + (6 + 5 * 2 * (4 * 8)) * 9 + 4 * 2
6 * 5
(6 * (3 * 2 + 6 + 5 * 4 + 9) + 3 * 7 + 3) + 6 + 5 + 8 + 2
6 * 2 + 7 + 4 + 4 + (9 + 2 + 4 + 9)
8 * 2 * (6 + (5 + 9 * 9) + 9 + 2)
(7 * 7 * (3 + 8 * 2 * 8) + 3 + 2) + 5
((6 + 4 + 3 * 3 * 9 + 8) * (5 + 4 + 6 + 3) + (3 + 4 + 5 + 3) + 7) + 7
3 + 5 + (2 * (7 + 9 * 3) * (4 + 3 * 9 * 4 * 5))
3 + (6 * 9 + 7) * (2 * (4 + 3 * 5 + 5) + 7 + 5 + 2 * 2) + 8 * 5
(3 + 3) + 3 * 2 + 6 * (2 * 5 + 7) * 8
3 * 8 + (3 * 9 * 2 * (9 + 6 * 6 * 6 + 6) * 8) * (2 + 4 + 9) + 4
6 + 2 * 7 * ((7 + 8 * 9 * 3 * 3 * 9) + (3 * 8 + 5 + 2) * 9 + 8 + 4)
3 + ((6 * 2 * 5 * 3 * 9 + 9) * 3 + 7 * 8 + 6) + 9 + (2 + 7 + 9)
((8 * 7 * 7 * 2 + 7 + 9) * 9 * 7 + 7 + 5) * 7
3 * 3 + 9 + 3 * 2 * 4
(5 * 6 + 4 + 2 * 2 + 5) * 4 * 3 * 5 + (5 + 2 * 7 + 8 * 5)
9 * 5 + 5 * (4 * 8 * 8 + 7)
3 + ((2 * 9) * 3 * (3 * 2 + 3 * 7 * 9) * 6) * 3 * (6 + 9 * 4 * 2) + 5
((8 * 9 * 6 * 5) * 2) * 4 + 4 * 5 * 2 * (5 + 4 + 2)
7 + ((6 * 9 + 6 + 4 + 7 + 5) * (7 + 6 + 8) * 8)
6 + 5 * (9 * 7 + (3 + 8)) + 2 + (8 * 6 * 9) * (6 * 4 + 5 + 6)
((7 + 6 + 2 + 8) * 2 * 4 + 2 + 3) + 7 * 5
6 * 2 * 8 + (9 * 5 * 5 + 6 * (6 * 4) * (5 + 7 * 7 * 3)) * ((2 * 4 + 4) * 2 + 8 * 8 * 6 * 7) * 8
7 * (9 + 7 * 7 + 8 + 7) + 8 * 6 + 4 + 2
(9 + 5 * 8 + 3 + 4) * 2 + ((7 * 5 + 6 * 3) + 3 + (2 * 5 * 7 * 6 + 5) * 7 + (4 * 5 + 8 + 3)) * 2 * 9 + 7
6 * 8 + (2 + (3 + 7 + 2 + 6 * 5 * 2) * 4 + 3 * (9 * 3 + 6 + 6 * 6)) + 3 * (8 * 3 * 2) * (7 * 5 + 6)
(3 + 6 * (5 * 3 + 3 + 3 * 6 + 4) * (5 + 3 * 5 * 9 + 6 * 5)) + 2 + 3
8 * (5 * 9 * 6 + 2 * 2 + 4) * 3 * 5 + 4
8 * (4 + 9 + (7 * 6)) + 8 + 5 + (7 + 6 + (8 * 7 + 9 + 4 * 5 + 9) + 7 * 4) + 9
(2 + 5) * (3 * 8 * (4 * 3) * (4 + 3 * 5 + 9 * 6 * 3) * 9)
(7 + 5 + (4 + 7 * 5)) * 4 + 9 + 6 + 8 + 3
(2 * 3 + 2 * 3 * 7) * 4 * 6 * (5 * 5 + 8 + 9 * (6 + 8 + 8 + 4 * 6 + 6)) * 2 * 5
7 + (7 + 8) * 6 + 5 * 6
(7 * (8 + 9 * 3 + 5) * 4 * 3 * 2 + (8 * 7 * 2 * 8)) + 8 * (9 + 6 * 4 * 3 * 4) * 9
8 * 5 * (7 * 5 + 3 * 4) + 5 + 8
4 + 9 + (8 * (5 + 4 * 6 + 9) * (4 * 5 + 4) * (3 + 6 + 7 * 4 * 5 + 8) + 8)
(3 * (9 + 2 * 7) * 4 + 5 * 8) * 8
5 + 9 * 2 * (5 + 6 + 4 * 9 + 5) + 8
2 * (2 * 9 * 4 * 7)
(5 * 8 + 3 * (2 * 8 + 5 * 2 + 6) + 8) * ((2 + 6) + 7 * 2 * (5 + 3 * 3 * 7 * 5) + 3 + 4) * 5 * 9 * 8 + 9
(9 * 5 + (5 + 3) + 8) + 8
7 * 4 + 7
4 * ((9 + 6 * 7) + 9 + 7 + (3 * 9 * 3 * 7 * 7) * 6 * 5) * (7 * 6 + 5 * 5 + 9) * 6 + (4 + 3)
(6 * 4 + 7 * (9 + 2 + 8) + 5) * 8 + 7 + 5 * ((5 + 4 + 9) + 9 * 3 * 3) + 5
6 * (5 * 8 * 9 + (3 + 3 + 4) + 8) * 5 * 3 * (6 + 3 * 3 * 9) + (3 + 3 * 7)
(8 * 6) * 6 * (6 + 5 * (2 * 2) * 5 * 9) * (3 * 5 + 3 + 4 + 9)
7 + ((3 + 6 * 4 * 4 * 8) + 4 + 8 + 4 + 6) + 7 * (9 + 2 + 7) * 4 + 7
(7 + (8 + 6 + 9 + 9 + 4 * 8) + 9 + 9 * 6) * (2 + (5 * 6) + 8 * 8) + ((9 * 7) + (7 + 7 + 5)) * 5
4 * (7 * 2 * 9) + 9 + 5
(6 + (4 + 7 * 5) * 4 * 9 + 3 * 7) + 8
9 + ((5 + 6 * 2 * 2 + 8) * 9 + 8) * 9 + (7 + 5 + 5) * (9 * 5)
7 + 9 * (3 + (6 * 3 + 8 + 3) + (5 * 2 * 5 * 9) * 4 * (9 + 4 + 3 + 8 * 5 + 2) + 4) + 7
(2 * 3 + 6) + (5 + (6 * 8 * 2 + 5 + 6 + 5) + 6 + 7 + (9 * 9 * 8 * 9 * 3)) * ((7 + 3 * 3 * 4 * 8) + 4 + 3) + 2 + (6 * 3 + 4 + 9 + 9) + 3
8 + (5 + (3 + 2 * 6 + 6 + 6) * 4) * 7 + 4 * 3
2 * 7 * 7 * (4 + 8) + 5
8 * 9 + 9 * ((6 + 4 * 4 * 6 + 5) + (4 + 3 + 7 * 8 + 3) + 6 + 4 * 5) * 9 + 6
5 + 6 + 9 + 7 + (6 * 8 * 5 * 7 + 3 + 7) + 6
8 * 8 + 6 + (3 * 6 + 4 + 9 * 7) * (5 * 3 * (4 * 5 * 9 + 2 + 9 + 2) + (6 * 2 * 6 + 7 + 6 + 6) * (8 + 6) + 9) + 7
9 * (7 * 8) * 9
5 + (5 + 3 + 7 * 9) * (5 * (9 * 8 + 9 + 2 + 4 * 8) + 6 + 5 + 3)
2 + 3 * 7 + (3 * (4 + 2) + 9 + 7 + 2) * 6 * 2
5 + 3 + (2 + 2 * (8 + 6 * 5 + 9 * 6)) * 7 + 4
8 + (7 * 7 + (7 + 5 + 9 + 6 + 5)) + 8 + 2 + 3 * 6
7 * 8 + 8 * (8 + 2 * 4) + 8
2 * 5 + 4 * 5 * 9 * (8 * 2 * (6 * 7 * 6 + 2 * 5))
8 * 9 * (8 * (6 * 7 * 8 * 9 + 2) * 5 * 9 + 7 + 7) + (8 + 6 * (9 * 9) + (8 + 9 + 9) + 3) + 8
(5 + 8 * (3 + 4 * 8) * (7 * 2 + 8) * 6) + 7 + 3 + (6 * (9 + 2) + 8 + (7 * 2 + 9 * 7 * 8 + 8) + 4) + (7 * (7 * 5 * 5) + 5) * 3
6 * (2 + 5 * (7 + 3 * 9 + 8 + 8 + 5) + 5) + 6 * 6
6 * 9 + 2 * 4 * (9 + 3 + 4 + 4) * 3
2 * (6 * 6) + 2 * 7
(7 * 5 + 7) + 7 * (5 * (9 + 2 + 2) + 4 * 6 * 4 * (7 * 8 * 6 + 7 * 7)) * 7 + 2 * 3
3 * (9 + 3 + (3 + 2 * 3 * 3 * 6 + 4) * 2 * 9 + (7 * 3))
((8 * 8 * 8 * 4) * 7 + (7 * 3) + (3 + 6 * 8 + 2) + 5 * 6) * 4
2 + 7 + 5 + 8 * (9 + 9 + 6 * (5 + 8 + 7 + 3 + 7))
8 + 3 + (9 * 2 + 2 + 4) + (5 + 8 * 2)
(8 * 7) * ((5 * 5 + 7 + 2 * 2) * 2 * (8 * 5 + 4) * 7 * 2) * (5 + 2 + 6 * 8) + 6 * 4 + ((9 + 9 + 5) * 7 * 8 * 8 * 8)
(6 + 7 * 4) * 7 + 4 * (4 * (6 * 2 + 8) * (3 * 5 + 7) + 6 + 6)
(3 * 6 + 9) + (6 * 8 + 6) * 8 + 5 + 4 * 7
4 + 2 * (6 + 2 + 4 + 3) + 6
8 + (6 * (8 * 8 + 6) + 2 + 9) * 4
3 + 7 + 9 + 2 * 9 + (5 * (2 + 7 * 2 + 5 + 4 + 3))
8 * ((6 * 4 + 2) + 2 + 2) * 2 * (3 * 3) + 6
(6 + 5) * 8 * 7 + 4
9 * ((3 + 9) + 8 * 5 * 8 * 5) + 9 * 2
2 * 3 * (5 * 6)
((2 + 4 * 7 + 4) * 4 + 8 * (4 * 2)) + 8 * 5
6 * (9 + 6 + (8 + 3 + 8 * 7 + 4) * 4) + 7
2 * 5 * ((3 + 7 * 6 + 6 * 2) * 4) * 3
8 + ((7 + 3 + 7 * 7) * (6 * 4 * 6 * 3 + 3 + 9)) * (8 * (3 * 5 * 5 * 6 + 6 * 7) + 5 + 4)
6 * 7 + 6 + (3 * 2 * 2 * 7 * 4 + (4 + 9)) * 4
4 + 4 * 2 * 5 * (7 + 7 * (7 + 5) * 4)
3 * (9 + 9 * 2 + 4 * 5) + 5 + 2 + 2
5 * 3
4 * (3 * (8 + 9) * 4 * 8 + (5 * 5 * 4 * 2 + 8) * 2) * 6 * 7
2 + ((3 + 9 * 9 * 9 * 4) * 6 * 3 + 6 + (4 * 8 * 6 * 8)) * 8 + 5
2 + 4 + (8 * 3 + 8 * (7 * 2 + 5) * 9 * 8) * (2 * 6 + 7 + 7) * (8 * 3 + 6 + 7 + 7) * 7
3 * (2 * 9 * (2 + 2 * 9) * 4) * 9 + ((6 * 6 + 2 + 5 * 6 + 5) * 9)
(3 * 4 + 2) * 9 * 9 + 5 * 4
4 * (9 * 9 + (6 * 5 + 3) * 2 * 3 + 4) + 9 * (7 * 9 + 3 + 3) + 2
7 * 2 + 3 * (9 + 3)
(8 * 3 + 7 * 4 * 5 + 8) + (4 * (8 + 2 * 7) * 2 * 8 * 2 + 9) + 3
7 + 9 + 8 + 6 * ((2 * 6 * 8) * (4 + 9 * 5 * 5 + 3 + 6) * 6 + 8) * 8
(4 * 6 + 4 + (7 * 9 + 6 + 6)) + 2 + 5 * 7 * 4
(2 + 9) * 3 + 5
6 * 7 + 3
8 + 2 + 3 * (5 * 2 * 9 * 5) * 5
3 + 8 + (8 + (5 + 8 + 4) + 3 * (9 * 7 * 2 * 7 * 8) * 7) + 5 * 8 + (2 + (7 + 9 * 6 + 6 * 6))
7 * 6 * 8 * (8 + 5 + 6 * 7 * 4 + 3) * 8 + 8
9 + 9 * 4 * 6 * ((3 * 9 * 9 * 4) + 2 + 2 + 9) + ((9 * 4 * 3 + 8 + 3) + 8 * (6 * 4 + 2 + 5 + 4) * 2 + 5 + 9)
(7 + 9 + (4 + 3 + 7 * 8) + 2 + (6 * 4 + 7 * 8 * 3)) + 6
(3 + (6 + 6 + 7 + 9 + 6) * 8 + 4 + 6) * 9 * 2 + (7 * 2 * 6 * 5 * 6 + 9) * ((7 + 4 * 7 + 4 * 9 + 9) + 6 * 4 * 8 * 9) + 4
9 * (2 * 7 + 4) * 6 + 7 + 2
(4 * 5 * 9 + 2 * 9 + 2) + 5 * 4 * (3 + (2 + 3) + (6 * 5 + 5 + 5 + 2 + 3) + 5)
8 * 6 * (4 * 8) + (3 + 8 + 9 + 6 * 3) + (8 * 8)
(6 * 5 * 7) + 3 + 7 * 4`;

const inputExample = `2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2`;

const expToValue = (line) => {
  if (line[0] === '(') {
    line = line.substring(1, line.length - 1);
  }
  const chars = line.split(' ');
  let sum;
  let operand = '';
  for (const char of chars) {
    if (char === '+') {
      operand = '+';
    }
    if (char === '*') {
      operand = '*';
    }
    if (!sum) {
      sum = parseInt(char);
    } else if (operand === '+' && parseInt(char)) {
      sum += parseInt(char);
      operant = '';
    } else if (operand === '*' && parseInt(char)) {
      sum *= parseInt(char);
      operant = '';
    }
  }
  return sum;
};

function spliceString(str, index, count, add) {
  // We cannot pass negative indexes directly to the 2nd slicing operation.
  if (index < 0) {
    index = str.length + index;
    if (index < 0) {
      index = 0;
    }
  }

  return str.slice(0, index) + (add || '') + str.slice(index + count);
}

const parseLine = (line) => {
  const firstP = line.indexOf('(');
  if (firstP > -1) {
    while (line.indexOf('(') > -1) {
      const firstClosePIndex = line.indexOf(')');
      const untilFirstCloseP = line.substring(0, firstClosePIndex);
      const matchingStartPIndex = untilFirstCloseP.lastIndexOf('(');
      const expression = line.substring(
        matchingStartPIndex,
        firstClosePIndex + 1,
      );
      console.log(expression);
      const value = expToValue(expression);
      line = spliceString(line, matchingStartPIndex, expression.length, value);
    }
    return expToValue(line);
  } else {
    return expToValue(line);
  }
};

const lines = homeworkInput.split('\n');
const results = [];
for (const line of lines) {
  results.push(parseLine(line));
}
console.log(
  results.reduce((acc, val) => {
    return acc + val;
  }, 0),
);
console.log(results);
